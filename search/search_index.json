{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TimeContinnum","text":"<p>TimeContinuum is a time abstraction library.</p> <p>The goal is to provide a safe way to manipulate time in your programs.</p> <p>It achieves this via:</p> <ul> <li>an expressive object oriented API to avoid magic strings</li> <li>a clear separation between what's mutable and immutable</li> </ul> Sneak peek <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Format,\n};\n\n$clock = Clock::live();\n$start = $clock-&gt;now();\n// do some stuff\n$end = $clock-&gt;now();\n$took = $end\n    -&gt;elapsedSince($start)\n    -&gt;asPeriod();\n\n\\printf(\n    'The script ended at %s and it took %s second(s), %s millisecond(s) %s microsecond(s).',\n    $end-&gt;format(Format::iso8601()),\n    $took-&gt;seconds(),\n    $took-&gt;milliseconds(),\n    $took-&gt;microseconds(),\n);\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>composer require innmind/time-continuum\n</code></pre>"},{"location":"getting-started/clocks/","title":"Clocks","text":"<p>Dependency injection</p> <p>A <code>Clock</code> should be treated as a singleton and instanciated once in your program and then passed as argument everywhere you need it in your program.</p>"},{"location":"getting-started/clocks/#live","title":"Live","text":"<p>This is the clock you should use in your programs. By default it's set to the UTC timezone (no matter the configuration of your machine).</p> <p>To access the current time you would do:</p> <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    PointInTime,\n};\n\n$clock = Clock::live();\n$point = $clock-&gt;now(); // instance of PointInTime\necho $point-&gt;toString(); // prints something like 2024-11-24T12:34:25+00:00\n</code></pre> <p>And to build a <code>PointInTime</code> back from a <code>string</code>:</p> <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Format,\n    PointInTime,\n};\nuse Innmind\\Immutable\\Maybe;\n\n$time = '2024-11-24T12:34:25+00:00';\n\n$clock = Clock::live();\n$at = $clock-&gt;at($time, Format::iso8601()); // instance of Maybe&lt;PointInTime&gt;\n$point = $at-&gt;match(\n    static fn(PointInTime $point) =&gt; $point,\n    static fn() =&gt; null,\n);\n</code></pre> <p>The <code>at</code> method returns a <code>Maybe</code> monad that may contain a <code>PointInTime</code>. This is in case the <code>$time</code> variable contains a value that doesn't correspond to the specified format (here <code>ISO8601</code>).</p> <p>This means that the <code>$point</code> variable here is an instance of <code>PointInTime</code> because the <code>$time</code> value is valid. If it's invalid then <code>$point</code> is <code>null</code>.</p>"},{"location":"getting-started/clocks/#logger","title":"Logger","text":"<p>This clock will create a log everytime you call <code>-&gt;now()</code> or <code>-&gt;at()</code>.</p> <p>To build this clock you need another clock (typically a live one) and a PSR logger:</p> <pre><code>use Innmind\\TimeContinuum\\Clock;\nuse Psr\\Log\\LoggerInterface;\n\n$clock = Clock::logger(\n    Clock::live(),\n    /* any instance of LoggerInterface (1) */\n);\n</code></pre> <ol> <li>Like monolog for example.</li> </ol> <p>You can then use <code>$clock</code> like any other clock.</p>"},{"location":"getting-started/clocks/#frozen","title":"Frozen","text":"<p>This clock is only useful when testing your program. It allows to specify the point in time at which your programs run.</p> <p>This way you can test your program for special scenarii like a leap year, daylight saving time and so on...</p> <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Format,\n};\n\n$clock = Clock::live()\n    -&gt;at('2024-11-24T12:34:25+00:00', Format::iso8601())\n    -&gt;match(\n        Clock::frozen(...),\n        static fn() =&gt; throw new \\LogicException('Specify a valid date'),\n    );\n</code></pre> Warning <p>Bear in mind that <code>$clock-&gt;now()</code> will always return the same object. This means that if your program rely on calculating an elapsed period it will always return <code>0</code>. If run in a loop you may end up with an inifinite one.</p>"},{"location":"getting-started/elapsed-period/","title":"Elapsed period","text":"<p>This is the number of microseconds between two points in time.</p> <pre><code>use Innmind\\TimeContinuum\\Clock;\n\n$clock = Clock::live();\n$start = $clock-&gt;now();\n// do some stuff\n$end = $clock-&gt;now();\n\n$elapsed = $end-&gt;elapsedSince($start);\n</code></pre> <p><code>$elapsed</code> is an instance of <code>Innmind\\TimeContinuum\\ElapsedPeriod</code>.</p> <p>This is especially useful when working with network I/O to check for timeouts.</p> <p>This example uses a monotonic clock internally to avoid the problem where the server clock re-synchronize and jump back in time. In this case <code>$end</code> is technically before <code>$start</code> but the elapsed period is still a positive <code>int</code>.</p> Info <p>Bear in mind that the monotonic clock only works on <code>PointInTime</code>s returned by <code>$clock-&gt;now()</code>. If <code>-&gt;elapsedSince()</code> is called on points returned by <code>$clock-&gt;at()</code> it will compare the number of microseconds since epoch.</p> Warning <p><code>ElapsedPeriod</code> uses an <code>int</code> internally to represent the number of microseconds. If you compare two points far away between each other you may end up with an overflow.</p> <p>Since this feature is mainly intended for network I/O handling the points should be close from one another. So this bug won't be addresed at least for now.</p>"},{"location":"getting-started/formats/","title":"Formats","text":"<p>A <code>Format</code> is a representation on how to convert a <code>PointInTime</code> to a <code>string</code>, or vice versa.</p> <p>By default this library comes with these formats:</p> <pre><code>use Innmind\\TimeContinuum\\Format;\n\nFormat::cookie();\nFormat::iso8601();\nFormat::rfc1036();\nFormat::rfc1123();\nFormat::rfc2822();\nFormat::rfc822();\nFormat::rfc850();\nFormat::rss();\n</code></pre> <p>Formats are wrapped in an object in order to give them a name. When used in your application you can reference these names instead of duplicating the strings everywhere.</p>"},{"location":"getting-started/formats/#convert-to-a-string","title":"Convert to a string","text":"<pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Format,\n};\n\necho Clock::live()\n    -&gt;now()\n    -&gt;format(Format::iso8601());\n</code></pre> <p>This would print something like <code>'2024-11-24T14:50:00+00:00'</code>.</p>"},{"location":"getting-started/formats/#convert-from-a-string","title":"Convert from a string","text":"<pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Format,\n    PointInTime,\n};\n\n$point = Clock::live()\n    -&gt;at('some string', Format::iso8601())\n    -&gt;match(\n        static fn(PointInTime $point) =&gt; $point,\n        static fn() =&gt; null,\n    );\n</code></pre> <p>Here <code>$point</code> is <code>null</code> because <code>'some string'</code> is not a valid date.</p>"},{"location":"getting-started/formats/#define-your-own-format","title":"Define your own format","text":"<p>If you want to use your own format you can do this via <code>Format::of('date format')</code>. The <code>string</code> can be anything accepted by <code>\\DateTimeImmutable::format()</code>.</p> <p>You're encouraged to statically define these formats somewhere in your program like this:</p> <pre><code>use Innmind\\TimeContinuum\\Format;\n\nfinal class MyFormats\n{\n    public static function iso8601WithMicroseconds(): Format\n    {\n        return Format::of('Y-m-dT:H:i:s.uP');\n    }\n}\n</code></pre>"},{"location":"getting-started/periods/","title":"Periods","text":""},{"location":"getting-started/periods/#go-forward-in-time","title":"Go forward in time","text":"<pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Period,\n};\n\n$future = Clock::live()\n    -&gt;now()\n    -&gt;goForward(\n        Period::day(1)\n            -&gt;and(Period::hour(12)),\n    );\n</code></pre> <p><code>$future</code> is now a day and a half ahead of the current time.</p>"},{"location":"getting-started/periods/#go-back-in-time","title":"Go back in time","text":"<pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Period,\n};\n\n$past = Clock::live()\n    -&gt;now()\n    -&gt;goBack(\n        Period::day(1)\n            -&gt;and(Period::hour(12)),\n    );\n</code></pre> <p><code>$past</code> is now a day and a half behind of the current time.</p>"},{"location":"getting-started/periods/#compare-to-an-elapsed-period","title":"Compare to an elapsed period","text":"<pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Period,\n};\n\n$clock = Clock::live();\n$start = $clock-&gt;now();\n// do some stuff\n$clock\n    -&gt;now()\n    -&gt;elapsedSince($start)\n    -&gt;longerThan(\n        Period::second(10)-&gt;asElapsedPeriod(),\n    ); // returns a bool\n</code></pre>"},{"location":"getting-started/points-in-time/","title":"Points in time","text":"<p>See the clocks to learn to have access to these objects.</p> <p>All examples below use the <code>$point</code> variable that reference an instance of <code>Innmind\\TimeContinuum\\PointInTime</code>.</p>"},{"location":"getting-started/points-in-time/#year","title":"Year","text":"<pre><code>$point-&gt;year()-&gt;toInt();\n</code></pre> <p>This will return the year as an <code>int</code>.</p> <pre><code>$point-&gt;year()-&gt;numberOfDays();\n</code></pre> <p>This returns <code>365</code> or <code>366</code> on leap years.</p>"},{"location":"getting-started/points-in-time/#month","title":"Month","text":"<pre><code>$point-&gt;month()-&gt;ofYear();\n</code></pre> <p>This returns a value from the enum <code>Innmind\\TimeContinuum\\Calendar\\Month</code>.</p> <pre><code>$point-&gt;month()-&gt;numberOfDays();\n</code></pre> <p>This returns an <code>int</code> between <code>28</code> and <code>31</code>.</p>"},{"location":"getting-started/points-in-time/#day","title":"Day","text":"<pre><code>$point-&gt;day()-&gt;ofYear();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>365</code>.</p> <pre><code>$point-&gt;day()-&gt;ofMonth();\n</code></pre> <p>This returns an <code>int</code> between <code>1</code> and <code>31</code>.</p> <pre><code>$point-&gt;day()-&gt;ofWeek();\n</code></pre> <p>This returns a value from the enum <code>Innmind\\TimeContinuum\\Calendar\\Day</code>.</p>"},{"location":"getting-started/points-in-time/#hour","title":"Hour","text":"<pre><code>$point-&gt;hour()-&gt;toInt();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>23</code>.</p>"},{"location":"getting-started/points-in-time/#minute","title":"Minute","text":"<pre><code>$point-&gt;minute()-&gt;toInt();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>59</code>.</p>"},{"location":"getting-started/points-in-time/#second","title":"Second","text":"<pre><code>$point-&gt;second()-&gt;toInt();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>59</code>.</p>"},{"location":"getting-started/points-in-time/#millisecond","title":"Millisecond","text":"<pre><code>$point-&gt;millisecond()-&gt;toInt();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>999</code>.</p>"},{"location":"getting-started/points-in-time/#microsecond","title":"Microsecond","text":"<pre><code>$point-&gt;microsecond()-&gt;toInt();\n</code></pre> <p>This returns an <code>int</code> between <code>0</code> and <code>999</code>.</p>"},{"location":"getting-started/points-in-time/#offset","title":"Offset","text":"<pre><code>$offset = $point-&gt;offset();\n$hours = $offset-&gt;hours();\n$minutes = $offset-&gt;minutes();\n</code></pre> <p><code>$hours</code> is an <code>int</code> between <code>-12</code> and <code>14</code>. <code>$minutes</code> is an <code>int</code> between <code>0</code> and <code>59</code> but usually is either <code>0</code>, <code>15</code>, <code>30</code> or <code>45</code>.</p>"},{"location":"getting-started/points-in-time/#comparing-points","title":"Comparing points","text":"<pre><code>$point-&gt;aheadOf($anotherPoint);\n$point-&gt;equals($anotherPoint);\n</code></pre> <p>Both methods return a <code>bool</code>.</p>"},{"location":"getting-started/time-offsets/","title":"Time offsets","text":"<p>This is a value retrieved from a point in time and is expressed in a number of hours and minutes.</p> <pre><code>use Innmind\\TimeContinuum\\Clock;\n\n$offset = Clock::live()-&gt;now()-&gt;offset();\n</code></pre> <ul> <li><code>$offset-&gt;hours()</code> returns an <code>int</code> between <code>-12</code> and <code>14</code></li> <li><code>$offset-&gt;minutes()</code> returns an <code>int</code> between <code>0</code> and <code>59</code></li> </ul> <p>Via this object you cannot know in which timezone you're in. If you need to keep track of this you should model this in your program and not rely on this information.</p> <p>When you have access to a <code>PointInTime</code> you can change its offset like this:</p> <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Offset,\n};\n\n$utc = Clock::live()-&gt;now();\n$newYork = $utc-&gt;changeOffset(Offset::minus(5));\n</code></pre> <p>If <code>$utc</code> represents <code>'2024-11-24T14:25:00+00:00'</code> then <code>$newYork</code> represents <code>'2024-11-24T09:25:00-05:00'</code>.</p>"},{"location":"getting-started/timezones/","title":"Timezones","text":"<p>A timezone is a time offset referenced by a city name.</p> <p>As described in the terminology section the offset for a city may not always be the same depending when you are in time.</p> <p>Because it can change, a timezone is handled at the clock level. By default the clock offset is <code>+00:00</code> but you can change it like this:</p> <pre><code>use Innmind\\TimeContinuum\\{\n    Clock,\n    Timezones,\n};\n\n$utc = Clock::live();\n$paris = $utc-&gt;switch(\n    static fn(Timezones $timezones) =&gt; $timezones\n        -&gt;europe()\n        -&gt;paris(),\n);\n</code></pre> <p>We now have two clocks. <code>$utc</code> is still at <code>+00:00</code> and <code>$paris</code> will depend on when this code is called. If you run this the 24 november (of any year) it will use <code>+01:00</code> and if run the 1 july (of any year) it will use <code>+02:00</code>. Because France use daylight saving time and change its offset twice a year.</p> <p>Note</p> <p>Once the timezone offset is applied to the returned clock it no longer changes. This is important if you have long running processes.</p> <p>For example if you started a process on the 26th of october 2024, switched to the Paris timezone, and let the process run for multiple days it will always be at <code>+02:00</code>. Even though Paris switch to <code>+01:00</code> on the 27th of october.</p>"},{"location":"getting-started/timezones/#available-timezones","title":"Available timezones","text":"<p><code>$timezones</code> represents an intance of <code>Innmind\\TimeContinuum\\Timezones</code>.</p> AfricaAmericaAntarticaArcticAsiaAtlanticAustraliaEuropeIndianPacific <pre><code>$timezones-&gt;africa()-&gt;lome();\n$timezones-&gt;africa()-&gt;ceuta();\n$timezones-&gt;africa()-&gt;elAaiun();\n$timezones-&gt;africa()-&gt;portoNovo();\n$timezones-&gt;africa()-&gt;djibouti();\n$timezones-&gt;africa()-&gt;windhoek();\n$timezones-&gt;africa()-&gt;algiers();\n$timezones-&gt;africa()-&gt;ouagadougou();\n$timezones-&gt;africa()-&gt;bamako();\n$timezones-&gt;africa()-&gt;harare();\n$timezones-&gt;africa()-&gt;bujumbura();\n$timezones-&gt;africa()-&gt;douala();\n$timezones-&gt;africa()-&gt;brazzaville();\n$timezones-&gt;africa()-&gt;tripoli();\n$timezones-&gt;africa()-&gt;casablanca();\n$timezones-&gt;africa()-&gt;niamey();\n$timezones-&gt;africa()-&gt;mbabane();\n$timezones-&gt;africa()-&gt;blantyre();\n$timezones-&gt;africa()-&gt;conakry();\n$timezones-&gt;africa()-&gt;khartoum();\n$timezones-&gt;africa()-&gt;luanda();\n$timezones-&gt;africa()-&gt;libreville();\n$timezones-&gt;africa()-&gt;maseru();\n$timezones-&gt;africa()-&gt;lusaka();\n$timezones-&gt;africa()-&gt;darEsSalaam();\n$timezones-&gt;africa()-&gt;nairobi();\n$timezones-&gt;africa()-&gt;banjul();\n$timezones-&gt;africa()-&gt;bissau();\n$timezones-&gt;africa()-&gt;nouakchott();\n$timezones-&gt;africa()-&gt;johannesburg();\n$timezones-&gt;africa()-&gt;timbuktu();\n$timezones-&gt;africa()-&gt;saoTome();\n$timezones-&gt;africa()-&gt;freetown();\n$timezones-&gt;africa()-&gt;kampala();\n$timezones-&gt;africa()-&gt;dakar();\n$timezones-&gt;africa()-&gt;lagos();\n$timezones-&gt;africa()-&gt;cairo();\n$timezones-&gt;africa()-&gt;mogadishu();\n$timezones-&gt;africa()-&gt;gaborone();\n$timezones-&gt;africa()-&gt;tunis();\n$timezones-&gt;africa()-&gt;kigali();\n$timezones-&gt;africa()-&gt;malabo();\n$timezones-&gt;africa()-&gt;abidjan();\n$timezones-&gt;africa()-&gt;accra();\n$timezones-&gt;africa()-&gt;asmera();\n$timezones-&gt;africa()-&gt;ndjamena();\n$timezones-&gt;africa()-&gt;lubumbashi();\n$timezones-&gt;africa()-&gt;juba();\n$timezones-&gt;africa()-&gt;monrovia();\n$timezones-&gt;africa()-&gt;maputo();\n$timezones-&gt;africa()-&gt;kinshasa();\n$timezones-&gt;africa()-&gt;asmara();\n$timezones-&gt;africa()-&gt;bangui();\n$timezones-&gt;africa()-&gt;addisAbaba();\n</code></pre> <pre><code>$timezones-&gt;america()-&gt;argentina()-&gt;rioGallegos();\n$timezones-&gt;america()-&gt;argentina()-&gt;mendoza();\n$timezones-&gt;america()-&gt;argentina()-&gt;buenosAires();\n$timezones-&gt;america()-&gt;argentina()-&gt;ushuaia();\n$timezones-&gt;america()-&gt;argentina()-&gt;sanJuan();\n$timezones-&gt;america()-&gt;argentina()-&gt;laRioja();\n$timezones-&gt;america()-&gt;argentina()-&gt;salta();\n$timezones-&gt;america()-&gt;argentina()-&gt;sanLuis();\n$timezones-&gt;america()-&gt;argentina()-&gt;jujuy();\n$timezones-&gt;america()-&gt;argentina()-&gt;tucuman();\n$timezones-&gt;america()-&gt;argentina()-&gt;comodRivadavia();\n$timezones-&gt;america()-&gt;argentina()-&gt;catamarca();\n$timezones-&gt;america()-&gt;argentina()-&gt;cordoba();\n$timezones-&gt;america()-&gt;indiana()-&gt;vincennes();\n$timezones-&gt;america()-&gt;indiana()-&gt;marengo();\n$timezones-&gt;america()-&gt;indiana()-&gt;tellCity();\n$timezones-&gt;america()-&gt;indiana()-&gt;knox();\n$timezones-&gt;america()-&gt;indiana()-&gt;vevay();\n$timezones-&gt;america()-&gt;indiana()-&gt;indianapolis();\n$timezones-&gt;america()-&gt;indiana()-&gt;petersburg();\n$timezones-&gt;america()-&gt;indiana()-&gt;winamac();\n$timezones-&gt;america()-&gt;northDakota()-&gt;beulah();\n$timezones-&gt;america()-&gt;northDakota()-&gt;newSalem();\n$timezones-&gt;america()-&gt;northDakota()-&gt;center();\n$timezones-&gt;america()-&gt;montreal();\n$timezones-&gt;america()-&gt;guatemala();\n$timezones-&gt;america()-&gt;boaVista();\n$timezones-&gt;america()-&gt;portoAcre();\n$timezones-&gt;america()-&gt;winnipeg();\n$timezones-&gt;america()-&gt;santiago();\n$timezones-&gt;america()-&gt;virgin();\n$timezones-&gt;america()-&gt;moncton();\n$timezones-&gt;america()-&gt;noronha();\n$timezones-&gt;america()-&gt;recife();\n$timezones-&gt;america()-&gt;saintKitts();\n$timezones-&gt;america()-&gt;rankinInlet();\n$timezones-&gt;america()-&gt;jamaica();\n$timezones-&gt;america()-&gt;lima();\n$timezones-&gt;america()-&gt;rosario();\n$timezones-&gt;america()-&gt;cambridgeBay();\n$timezones-&gt;america()-&gt;coralHarbour();\n$timezones-&gt;america()-&gt;fortWayne();\n$timezones-&gt;america()-&gt;nassau();\n$timezones-&gt;america()-&gt;mazatlan();\n$timezones-&gt;america()-&gt;grandTurk();\n$timezones-&gt;america()-&gt;merida();\n$timezones-&gt;america()-&gt;ensenada();\n$timezones-&gt;america()-&gt;rainyRiver();\n$timezones-&gt;america()-&gt;bahiaBanderas();\n$timezones-&gt;america()-&gt;guadeloupe();\n$timezones-&gt;america()-&gt;cuiaba();\n$timezones-&gt;america()-&gt;scoresbysund();\n$timezones-&gt;america()-&gt;maceio();\n$timezones-&gt;america()-&gt;curacao();\n$timezones-&gt;america()-&gt;aruba();\n$timezones-&gt;america()-&gt;monterrey();\n$timezones-&gt;america()-&gt;hermosillo();\n$timezones-&gt;america()-&gt;guayaquil();\n$timezones-&gt;america()-&gt;managua();\n$timezones-&gt;america()-&gt;matamoros();\n$timezones-&gt;america()-&gt;losAngeles();\n$timezones-&gt;america()-&gt;tegucigalpa();\n$timezones-&gt;america()-&gt;monticello();\n$timezones-&gt;america()-&gt;nome();\n$timezones-&gt;america()-&gt;montevideo();\n$timezones-&gt;america()-&gt;gooseBay();\n$timezones-&gt;america()-&gt;boise();\n$timezones-&gt;america()-&gt;belem();\n$timezones-&gt;america()-&gt;atikokan();\n$timezones-&gt;america()-&gt;swiftCurrent();\n$timezones-&gt;america()-&gt;detroit();\n$timezones-&gt;america()-&gt;laPaz();\n$timezones-&gt;america()-&gt;chicago();\n$timezones-&gt;america()-&gt;creston();\n$timezones-&gt;america()-&gt;nipigon();\n$timezones-&gt;america()-&gt;costaRica();\n$timezones-&gt;america()-&gt;halifax();\n$timezones-&gt;america()-&gt;yellowknife();\n$timezones-&gt;america()-&gt;puertoRico();\n$timezones-&gt;america()-&gt;edmonton();\n$timezones-&gt;america()-&gt;mexicoCity();\n$timezones-&gt;america()-&gt;saoPaulo();\n$timezones-&gt;america()-&gt;yakutat();\n$timezones-&gt;america()-&gt;saintThomas();\n$timezones-&gt;america()-&gt;chihuahua();\n$timezones-&gt;america()-&gt;grenada();\n$timezones-&gt;america()-&gt;elSalvador();\n$timezones-&gt;america()-&gt;santoDomingo();\n$timezones-&gt;america()-&gt;montserrat();\n$timezones-&gt;america()-&gt;portoVelho();\n$timezones-&gt;america()-&gt;panama();\n$timezones-&gt;america()-&gt;antigua();\n$timezones-&gt;america()-&gt;santarem();\n$timezones-&gt;america()-&gt;dawson();\n$timezones-&gt;america()-&gt;saintBarthelemy();\n$timezones-&gt;america()-&gt;iqaluit();\n$timezones-&gt;america()-&gt;eirunepe();\n$timezones-&gt;america()-&gt;inuvik();\n$timezones-&gt;america()-&gt;anguilla();\n$timezones-&gt;america()-&gt;portOfSpain();\n$timezones-&gt;america()-&gt;araguaina();\n$timezones-&gt;america()-&gt;guyana();\n$timezones-&gt;america()-&gt;fortaleza();\n$timezones-&gt;america()-&gt;blancSablon();\n$timezones-&gt;america()-&gt;juneau();\n$timezones-&gt;america()-&gt;cayman();\n$timezones-&gt;america()-&gt;menominee();\n$timezones-&gt;america()-&gt;cayenne();\n$timezones-&gt;america()-&gt;pangnirtung();\n$timezones-&gt;america()-&gt;metlakatla();\n$timezones-&gt;america()-&gt;asuncion();\n$timezones-&gt;america()-&gt;saintLucia();\n$timezones-&gt;america()-&gt;saintVincent();\n$timezones-&gt;america()-&gt;martinique();\n$timezones-&gt;america()-&gt;kralendijk();\n$timezones-&gt;america()-&gt;newYork();\n$timezones-&gt;america()-&gt;vancouver();\n$timezones-&gt;america()-&gt;bogota();\n$timezones-&gt;america()-&gt;dominica();\n$timezones-&gt;america()-&gt;danmarkshavn();\n$timezones-&gt;america()-&gt;anchorage();\n$timezones-&gt;america()-&gt;marigot();\n$timezones-&gt;america()-&gt;rioBranco();\n$timezones-&gt;america()-&gt;paramaribo();\n$timezones-&gt;america()-&gt;caracas();\n$timezones-&gt;america()-&gt;resolute();\n$timezones-&gt;america()-&gt;godthab();\n$timezones-&gt;america()-&gt;catamarca();\n$timezones-&gt;america()-&gt;glaceBay();\n$timezones-&gt;america()-&gt;regina();\n$timezones-&gt;america()-&gt;toronto();\n$timezones-&gt;america()-&gt;barbados();\n$timezones-&gt;america()-&gt;santaIsabel();\n$timezones-&gt;america()-&gt;miquelon();\n$timezones-&gt;america()-&gt;havana();\n$timezones-&gt;america()-&gt;ojinaga();\n$timezones-&gt;america()-&gt;denver();\n$timezones-&gt;america()-&gt;cancun();\n$timezones-&gt;america()-&gt;thunderBay();\n$timezones-&gt;america()-&gt;adak();\n$timezones-&gt;america()-&gt;saintJohns();\n$timezones-&gt;america()-&gt;portAuPrince();\n$timezones-&gt;america()-&gt;whitehorse();\n$timezones-&gt;america()-&gt;louisville();\n$timezones-&gt;america()-&gt;manaus();\n$timezones-&gt;america()-&gt;lowerPrinces();\n$timezones-&gt;america()-&gt;sitka();\n$timezones-&gt;america()-&gt;thule();\n$timezones-&gt;america()-&gt;campoGrande();\n$timezones-&gt;america()-&gt;phoenix();\n$timezones-&gt;america()-&gt;shiprock();\n$timezones-&gt;america()-&gt;bahia();\n$timezones-&gt;america()-&gt;tortola();\n$timezones-&gt;america()-&gt;dawsonCreek();\n$timezones-&gt;america()-&gt;tijuana();\n$timezones-&gt;america()-&gt;belize();\n$timezones-&gt;america()-&gt;atka();\n</code></pre> <pre><code>$timezones-&gt;antartica()-&gt;davis();\n$timezones-&gt;antartica()-&gt;palmer();\n$timezones-&gt;antartica()-&gt;syowa();\n$timezones-&gt;antartica()-&gt;casey();\n$timezones-&gt;antartica()-&gt;troll();\n$timezones-&gt;antartica()-&gt;mcMurdo();\n$timezones-&gt;antartica()-&gt;vostok();\n$timezones-&gt;antartica()-&gt;rothera();\n$timezones-&gt;antartica()-&gt;mawson();\n$timezones-&gt;antartica()-&gt;macquarie();\n$timezones-&gt;antartica()-&gt;southPole();\n$timezones-&gt;antartica()-&gt;dumontDUrville();\n</code></pre> <pre><code>$timezones-&gt;arctic()-&gt;longyearbyen();\n</code></pre> <pre><code>$timezones-&gt;asia()-&gt;manila();\n$timezones-&gt;asia()-&gt;baghdad();\n$timezones-&gt;asia()-&gt;ulaanbaatar();\n$timezones-&gt;asia()-&gt;almaty();\n$timezones-&gt;asia()-&gt;samarkand();\n$timezones-&gt;asia()-&gt;ustNera();\n$timezones-&gt;asia()-&gt;pontianak();\n$timezones-&gt;asia()-&gt;tehran();\n$timezones-&gt;asia()-&gt;saigon();\n$timezones-&gt;asia()-&gt;krasnoyarsk();\n$timezones-&gt;asia()-&gt;hebron();\n$timezones-&gt;asia()-&gt;kuching();\n$timezones-&gt;asia()-&gt;katmandu();\n$timezones-&gt;asia()-&gt;shanghai();\n$timezones-&gt;asia()-&gt;calcutta();\n$timezones-&gt;asia()-&gt;jayapura();\n$timezones-&gt;asia()-&gt;muscat();\n$timezones-&gt;asia()-&gt;omsk();\n$timezones-&gt;asia()-&gt;aqtau();\n$timezones-&gt;asia()-&gt;khandyga();\n$timezones-&gt;asia()-&gt;riyadh();\n$timezones-&gt;asia()-&gt;bangkok();\n$timezones-&gt;asia()-&gt;thimphu();\n$timezones-&gt;asia()-&gt;aden();\n$timezones-&gt;asia()-&gt;yekaterinburg();\n$timezones-&gt;asia()-&gt;oral();\n$timezones-&gt;asia()-&gt;novokuznetsk();\n$timezones-&gt;asia()-&gt;bishkek();\n$timezones-&gt;asia()-&gt;macau();\n$timezones-&gt;asia()-&gt;qyzylorda();\n$timezones-&gt;asia()-&gt;seoul();\n$timezones-&gt;asia()-&gt;irkutsk();\n$timezones-&gt;asia()-&gt;aqtobe();\n$timezones-&gt;asia()-&gt;chongqing();\n$timezones-&gt;asia()-&gt;kabul();\n$timezones-&gt;asia()-&gt;thimbu();\n$timezones-&gt;asia()-&gt;karachi();\n$timezones-&gt;asia()-&gt;jakarta();\n$timezones-&gt;asia()-&gt;harbin();\n$timezones-&gt;asia()-&gt;novosibirsk();\n$timezones-&gt;asia()-&gt;dili();\n$timezones-&gt;asia()-&gt;colombo();\n$timezones-&gt;asia()-&gt;ashkhabad();\n$timezones-&gt;asia()-&gt;dacca();\n$timezones-&gt;asia()-&gt;ashgabat();\n$timezones-&gt;asia()-&gt;ujungPandang();\n$timezones-&gt;asia()-&gt;qatar();\n$timezones-&gt;asia()-&gt;tokyo();\n$timezones-&gt;asia()-&gt;macao();\n$timezones-&gt;asia()-&gt;tashkent();\n$timezones-&gt;asia()-&gt;baku();\n$timezones-&gt;asia()-&gt;pyongyang();\n$timezones-&gt;asia()-&gt;tbilisi();\n$timezones-&gt;asia()-&gt;amman();\n$timezones-&gt;asia()-&gt;vladivostok();\n$timezones-&gt;asia()-&gt;damascus();\n$timezones-&gt;asia()-&gt;bahrain();\n$timezones-&gt;asia()-&gt;vientiane();\n$timezones-&gt;asia()-&gt;hovd();\n$timezones-&gt;asia()-&gt;kuwait();\n$timezones-&gt;asia()-&gt;magadan();\n$timezones-&gt;asia()-&gt;ulanBator();\n$timezones-&gt;asia()-&gt;nicosia();\n$timezones-&gt;asia()-&gt;telAviv();\n$timezones-&gt;asia()-&gt;choibalsan();\n$timezones-&gt;asia()-&gt;brunei();\n$timezones-&gt;asia()-&gt;kualaLumpur();\n$timezones-&gt;asia()-&gt;kathmandu();\n$timezones-&gt;asia()-&gt;srednekolymsk();\n$timezones-&gt;asia()-&gt;dubai();\n$timezones-&gt;asia()-&gt;yakutsk();\n$timezones-&gt;asia()-&gt;beirut();\n$timezones-&gt;asia()-&gt;gaza();\n$timezones-&gt;asia()-&gt;singapore();\n$timezones-&gt;asia()-&gt;rangoon();\n$timezones-&gt;asia()-&gt;sakhalin();\n$timezones-&gt;asia()-&gt;phnomPenh();\n$timezones-&gt;asia()-&gt;kamchatka();\n$timezones-&gt;asia()-&gt;yerevan();\n$timezones-&gt;asia()-&gt;chungking();\n$timezones-&gt;asia()-&gt;hoChiMinh();\n$timezones-&gt;asia()-&gt;chita();\n$timezones-&gt;asia()-&gt;istanbul();\n$timezones-&gt;asia()-&gt;hongKong();\n$timezones-&gt;asia()-&gt;dhaka();\n$timezones-&gt;asia()-&gt;jerusalem();\n$timezones-&gt;asia()-&gt;makassar();\n$timezones-&gt;asia()-&gt;kolkata();\n$timezones-&gt;asia()-&gt;taipei();\n$timezones-&gt;asia()-&gt;dushanbe();\n$timezones-&gt;asia()-&gt;anadyr();\n</code></pre> <pre><code>$timezones-&gt;atlantic()-&gt;faroe();\n$timezones-&gt;atlantic()-&gt;southGeorgia();\n$timezones-&gt;atlantic()-&gt;capeVerde();\n$timezones-&gt;atlantic()-&gt;faeroe();\n$timezones-&gt;atlantic()-&gt;bermuda();\n$timezones-&gt;atlantic()-&gt;janMayen();\n$timezones-&gt;atlantic()-&gt;reykjavik();\n$timezones-&gt;atlantic()-&gt;saintHelena();\n$timezones-&gt;atlantic()-&gt;canary();\n$timezones-&gt;atlantic()-&gt;madeira();\n$timezones-&gt;atlantic()-&gt;azores();\n$timezones-&gt;atlantic()-&gt;stanley();\n</code></pre> <pre><code>$timezones-&gt;australia()-&gt;lindeman();\n$timezones-&gt;australia()-&gt;currie();\n$timezones-&gt;australia()-&gt;victoria();\n$timezones-&gt;australia()-&gt;adelaide();\n$timezones-&gt;australia()-&gt;perth();\n$timezones-&gt;australia()-&gt;brisbane();\n$timezones-&gt;australia()-&gt;west();\n$timezones-&gt;australia()-&gt;australianCapitalTerritory();\n$timezones-&gt;australia()-&gt;north();\n$timezones-&gt;australia()-&gt;eucla();\n$timezones-&gt;australia()-&gt;lordeHoweIsland();\n$timezones-&gt;australia()-&gt;newSouthWales();\n$timezones-&gt;australia()-&gt;queensland();\n$timezones-&gt;australia()-&gt;south();\n$timezones-&gt;australia()-&gt;melbourne();\n$timezones-&gt;australia()-&gt;yancowinna();\n$timezones-&gt;australia()-&gt;canberra();\n$timezones-&gt;australia()-&gt;sydney();\n$timezones-&gt;australia()-&gt;darwin();\n$timezones-&gt;australia()-&gt;hobart();\n$timezones-&gt;australia()-&gt;brokenHill();\n$timezones-&gt;australia()-&gt;tasmania();\n</code></pre> <pre><code>$timezones-&gt;europe()-&gt;uzhgorod();\n$timezones-&gt;europe()-&gt;riga();\n$timezones-&gt;europe()-&gt;paris();\n$timezones-&gt;europe()-&gt;guernsey();\n$timezones-&gt;europe()-&gt;samara();\n$timezones-&gt;europe()-&gt;athens();\n$timezones-&gt;europe()-&gt;tirane();\n$timezones-&gt;europe()-&gt;london();\n$timezones-&gt;europe()-&gt;helsinki();\n$timezones-&gt;europe()-&gt;oslo();\n$timezones-&gt;europe()-&gt;podgorica();\n$timezones-&gt;europe()-&gt;minsk();\n$timezones-&gt;europe()-&gt;monaco();\n$timezones-&gt;europe()-&gt;lisbon();\n$timezones-&gt;europe()-&gt;tallinn();\n$timezones-&gt;europe()-&gt;berlin();\n$timezones-&gt;europe()-&gt;gibraltar();\n$timezones-&gt;europe()-&gt;prague();\n$timezones-&gt;europe()-&gt;stockholm();\n$timezones-&gt;europe()-&gt;moscow();\n$timezones-&gt;europe()-&gt;bucharest();\n$timezones-&gt;europe()-&gt;andorra();\n$timezones-&gt;europe()-&gt;vilnius();\n$timezones-&gt;europe()-&gt;rome();\n$timezones-&gt;europe()-&gt;kiev();\n$timezones-&gt;europe()-&gt;copenhagen();\n$timezones-&gt;europe()-&gt;belgrade();\n$timezones-&gt;europe()-&gt;isleOfMan();\n$timezones-&gt;europe()-&gt;budapest();\n$timezones-&gt;europe()-&gt;tiraspol();\n$timezones-&gt;europe()-&gt;vaduz();\n$timezones-&gt;europe()-&gt;sarajevo();\n$timezones-&gt;europe()-&gt;amsterdam();\n$timezones-&gt;europe()-&gt;mariehamn();\n$timezones-&gt;europe()-&gt;skopje();\n$timezones-&gt;europe()-&gt;kaliningrad();\n$timezones-&gt;europe()-&gt;bratislava();\n$timezones-&gt;europe()-&gt;sanMarino();\n$timezones-&gt;europe()-&gt;busingen();\n$timezones-&gt;europe()-&gt;zaporozhye();\n$timezones-&gt;europe()-&gt;chisinau();\n$timezones-&gt;europe()-&gt;brussels();\n$timezones-&gt;europe()-&gt;luxembourg();\n$timezones-&gt;europe()-&gt;belfast();\n$timezones-&gt;europe()-&gt;vienna();\n$timezones-&gt;europe()-&gt;ljubljana();\n$timezones-&gt;europe()-&gt;simferopol();\n$timezones-&gt;europe()-&gt;dublin();\n$timezones-&gt;europe()-&gt;nicosia();\n$timezones-&gt;europe()-&gt;zagreb();\n$timezones-&gt;europe()-&gt;jersey();\n$timezones-&gt;europe()-&gt;madrid();\n$timezones-&gt;europe()-&gt;vatican();\n$timezones-&gt;europe()-&gt;istanbul();\n$timezones-&gt;europe()-&gt;zurich();\n$timezones-&gt;europe()-&gt;sofia();\n$timezones-&gt;europe()-&gt;volgograd();\n$timezones-&gt;europe()-&gt;malta();\n$timezones-&gt;europe()-&gt;warsaw();\n</code></pre> <pre><code>$timezones-&gt;indian()-&gt;cocos();\n$timezones-&gt;indian()-&gt;antananarivo();\n$timezones-&gt;indian()-&gt;reunion();\n$timezones-&gt;indian()-&gt;chagos();\n$timezones-&gt;indian()-&gt;comoro();\n$timezones-&gt;indian()-&gt;mayotte();\n$timezones-&gt;indian()-&gt;maldives();\n$timezones-&gt;indian()-&gt;mauritius();\n$timezones-&gt;indian()-&gt;mahe();\n$timezones-&gt;indian()-&gt;kerguelen();\n$timezones-&gt;indian()-&gt;christmas();\n</code></pre> <pre><code>$timezones-&gt;pacific()-&gt;kosrae();\n$timezones-&gt;pacific()-&gt;enderbury();\n$timezones-&gt;pacific()-&gt;apia();\n$timezones-&gt;pacific()-&gt;noumea();\n$timezones-&gt;pacific()-&gt;chatham();\n$timezones-&gt;pacific()-&gt;wake();\n$timezones-&gt;pacific()-&gt;wallis();\n$timezones-&gt;pacific()-&gt;johnston();\n$timezones-&gt;pacific()-&gt;saipan();\n$timezones-&gt;pacific()-&gt;tarawa();\n$timezones-&gt;pacific()-&gt;pitcairn();\n$timezones-&gt;pacific()-&gt;niue();\n$timezones-&gt;pacific()-&gt;ponape();\n$timezones-&gt;pacific()-&gt;guam();\n$timezones-&gt;pacific()-&gt;auckland();\n$timezones-&gt;pacific()-&gt;pagoPago();\n$timezones-&gt;pacific()-&gt;chuuk();\n$timezones-&gt;pacific()-&gt;kwajalein();\n$timezones-&gt;pacific()-&gt;fakaofo();\n$timezones-&gt;pacific()-&gt;majuro();\n$timezones-&gt;pacific()-&gt;guadalcanal();\n$timezones-&gt;pacific()-&gt;efate();\n$timezones-&gt;pacific()-&gt;tongatapu();\n$timezones-&gt;pacific()-&gt;pohnpei();\n$timezones-&gt;pacific()-&gt;honolulu();\n$timezones-&gt;pacific()-&gt;bougainville();\n$timezones-&gt;pacific()-&gt;galapagos();\n$timezones-&gt;pacific()-&gt;gambier();\n$timezones-&gt;pacific()-&gt;palau();\n$timezones-&gt;pacific()-&gt;midway();\n$timezones-&gt;pacific()-&gt;marquesas();\n$timezones-&gt;pacific()-&gt;funafuti();\n$timezones-&gt;pacific()-&gt;norfolk();\n$timezones-&gt;pacific()-&gt;portMoresby();\n$timezones-&gt;pacific()-&gt;tahiti();\n$timezones-&gt;pacific()-&gt;fiji();\n$timezones-&gt;pacific()-&gt;kiritimati();\n$timezones-&gt;pacific()-&gt;truk();\n$timezones-&gt;pacific()-&gt;easter();\n$timezones-&gt;pacific()-&gt;rarotonga();\n$timezones-&gt;pacific()-&gt;yap();\n$timezones-&gt;pacific()-&gt;nauru();\n</code></pre>"},{"location":"preface/philosophy/","title":"Philosophy","text":"<p>TimeContinuum is designed around these objectives:</p> <ul> <li>an expressive API through a clear naming</li> <li>to handle time with precision</li> <li>simplify common use cases</li> </ul> <p>Time is a tricky business full of gotchas. It's easy to make mistake that go undetected for a while.</p> <p>The first step to avoid mistakes is to provide a good naming. Here, each component of time is accessible via expressive methods to give the least possible room to error.</p> <p>One of the hardest aspect of time is to distinguish what can change from what can't. Once again naming helps but it's not enough. This package creates a frontier between this two worlds. This is expressed via an <code>immutable</code> annotation (understood by Psalm) on what cannot change, and the rest may change.</p>"},{"location":"preface/terminology/","title":"Terminology","text":""},{"location":"preface/terminology/#clock","title":"Clock","text":"<p>A <code>Clock</code> is the root object to access time. Like a real clock, each time you demand the time it will provide a new value. This is part of the world that can change.</p> <p>Unlike real clocks, in a program we often have the use case to convert a <code>string</code> back to a time representation (1). Clocks provide a method for this. You can think of it as a factory. Even though this is done by a clock this method is determinist, meaning that you'll always have the same result for the same inputs.</p> <ol> <li>Such as reading a value from a database.</li> </ol>"},{"location":"preface/terminology/#point-in-time","title":"Point in time","text":"<p>As its name suggest it represents a fixed point in time on Earth. It represents time down to the microsecond. It also stores the time offset from UTC.</p> <p>These objects are generated by clocks.</p> <p>Once an object is created it can no longer change. But you can still create objects relative to it by specifying a period and the direction.</p>"},{"location":"preface/terminology/#timezone","title":"Timezone","text":"<p>A timezone represents a time offset from UTC for a set of cities on Earth (1).</p> <ol> <li>For example <code>Europe/Paris</code>.</li> </ol> <p>Due to politics a city may change its offset at any time (1). And for economic reasons some countries change their offset each year, a process called \"daylight saving time\" (2).</p> <ol> <li>This means some points in time don't exist in certain countries or exist twice.</li> <li>Usually they increase/decrease their offset by 1 or 2 hours.</li> </ol> <p>Because asking the offset for a timezone will yield different results depending on when you ask for it, it's part of the world that changes. This means that timezones are handled at the clock level.</p>"},{"location":"preface/terminology/#period","title":"Period","text":"<p>It represents the time between 2 points in time. It can be defined by a number of:</p> <ul> <li>years</li> <li>months</li> <li>days</li> <li>hours</li> <li>minutes</li> <li>seconds</li> <li>milliseconds</li> <li>microseconds</li> </ul> <p>Each of this component has to be a positive integer. It's when you apply it to a point in time that you decide if you want to go forward or back in time.</p> <p>Since these objects are not tied to a particular point in time they're immutable.</p>"},{"location":"preface/terminology/#elapsed-period","title":"Elapsed period","text":"<p>It represents the number of microseconds between two points in time.</p> <p>Once an object is created it cannot change.</p> <p>This is useful to compute the time your program took to accomplish a task. Operation often used when dealing with network I/O to handle timeouts.</p>"},{"location":"preface/terminology/#format","title":"Format","text":"<p>A format defines a way to represent a point in time as a <code>string</code> (1).</p> <ol> <li>Usually to store the value to a database or print it in a user interface.</li> </ol> <p>It's declared as an object to give meaning to the string format it encapsulate. The intent is to declare the string format once in an object in your program and reuse this object everywhere. This allows to attach a name to the format.</p> <p>This is an attempt to solve the problem (1) where the same format is duplicated everywhere in a program.</p> <ol> <li>We can see this practive in a lot of programs.</li> </ol>"},{"location":"upgrade/v3-to-v4/","title":"From v3 to v4","text":"<p>All namespaces are relative to <code>\\Innmind\\TimeContinuum\\</code>.</p> <p>These are the main changes, for an extensive list of changes go to the changelog.</p>"},{"location":"upgrade/v3-to-v4/#clocks","title":"Clocks","text":""},{"location":"upgrade/v3-to-v4/#live-clock","title":"Live clock","text":"BeforeAfter <pre><code>$clock = new Earth\\Clock;\n</code></pre> <pre><code>$clock = Clock::live();\n</code></pre>"},{"location":"upgrade/v3-to-v4/#logger","title":"Logger","text":"BeforeAfter <pre><code>$clock = new Logger\\Clock(\n    new Earth\\Clock,\n    /* an instance of Psr\\Log\\LoggerInterface */\n);\n</code></pre> <pre><code>$clock = Clock::logger(\n    Clock::live(),\n    /* an instance of Psr\\Log\\LoggerInterface */\n);\n</code></pre>"},{"location":"upgrade/v3-to-v4/#frozen","title":"Frozen","text":"BeforeAfter <pre><code>$clock = new Earth\\FrozenClock(\n    new Earth\\PointInTime\\PointInTime('some date'),\n);\n</code></pre> <pre><code>$clock = Clock::live()\n    -&gt;at('some date', Format::iso8601())\n    -&gt;match(\n        Clock::frozen(...),\n        static fn() =&gt; throw new \\LogicException('Use a valid date'),\n    );\n</code></pre>"},{"location":"upgrade/v3-to-v4/#timezones","title":"Timezones","text":"BeforeAfter <pre><code>$clock = new Earth\\Clock(\n    new Earth\\Timezone\\Europe\\Paris,\n);\n</code></pre> <pre><code>$clock = Clock::live()-&gt;switch(\n    static fn(Timezones $timezones) =&gt; $timezones\n        -&gt;europe()\n        -&gt;paris(),\n);\n</code></pre>"},{"location":"upgrade/v3-to-v4/#access-point-in-time-offset","title":"Access point in time offset","text":"BeforeAfter <pre><code>$clock-&gt;now()-&gt;timezone()-&gt;hours();\n$clock-&gt;now()-&gt;timezone()-&gt;minutes();\n</code></pre> <pre><code>$clock-&gt;now()-&gt;offset()-&gt;hours();\n$clock-&gt;now()-&gt;offset()-&gt;minutes();\n</code></pre>"},{"location":"upgrade/v3-to-v4/#modify-point-in-time-offset","title":"Modify point in time offset","text":"BeforeAfter <pre><code>$clock-&gt;now()-&gt;changeTimezone(new Earth\\Timezone\\UTC(2, 0));\n</code></pre> <pre><code>$clock-&gt;now()-&gt;changeOffset(Offset::plus(2, 0));\n</code></pre>"},{"location":"upgrade/v3-to-v4/#periods","title":"Periods","text":"BeforeAfter <pre><code>new Earth\\Period\\Year(42);\nnew Earth\\Period\\Month(42);\nnew Earth\\Period\\Day(42);\nnew Earth\\Period\\Hour(42);\nnew Earth\\Period\\Minute(42);\nnew Earth\\Period\\Second(42);\nnew Earth\\Period\\Millisecond(42);\n</code></pre> <pre><code>Period::year(42);\nPeriod::month(42);\nPeriod::day(42);\nPeriod::hour(42);\nPeriod::minute(42);\nPeriod::second(42);\nPeriod::millisecond(42);\n</code></pre>"},{"location":"upgrade/v3-to-v4/#formats","title":"Formats","text":"BeforeAfter <pre><code>$clock-&gt;now()-&gt;format(new Earth\\Format\\ISO8601);\n</code></pre> <pre><code>$clock-&gt;now()-&gt;format(Format::iso8601());\n</code></pre>"},{"location":"upgrade/v3-to-v4/#elapsed-periods","title":"Elapsed periods","text":"BeforeAfter <pre><code>$elapsed = /* any instance of ElapsedPeriod */\n$milliseconds = $elapsed-&gt;milliseconds();\n</code></pre> <pre><code>$elapsed = /* any instance of ElapsedPeriod */\n$period = $elapsed-&gt;asPeriod();\n$milliseconds = Period\\Value::day-&gt;seconds($period-&gt;days());\n$milliseconds += Period\\Value::hour-&gt;seconds($period-&gt;hours());\n$milliseconds += Period\\Value::minute-&gt;seconds($period-&gt;minutes());\n$milliseconds *= 1_000;\n$milliseconds += $period-&gt;milliseconds();\n</code></pre>"}]}